Sequences:

list and tuple objects can store any type of data

range objects store only integers

str objects can only store unicode characters.

Whenever values are logically connected to one another and it is important to keep them in order, you should store them in a sequence data structure.

After being defined, sequences can be used as more complex data structures such as queues and stacks.

        Common Sequence Operations
All sequence data types in Python support certain functions and operators and possess certain methods. For a sequence s:

    x in s returns True if x is equal to at least one element of s.

    s + s2 returns a single sequence of the elements of s followed by the elements of s2.

    s * n returns a single sequence of s repeated n times.

    s[i]returns the ith element of s (starting at 0).

NOTE: Python also supports negative indices. -1 represents the last element in a sequence.

    s[i:j] returns a slice of s from index i up to (but not including!) index j.

    s[i:j:k] returns a slice of s from i to j with steps of k in between.

    len(s) returns the number of elements in s.

    min(s) and max(s) return the minimum and maximum values in s, respectively. > NOTE: this requires the elements of s to be of the same data type, either str or numerical.

    s.index(x) returns the index of the first x in s.

    s.count(x) returns the number of instances of x in s.

list.sort() rearranges the elements of a list so that they are in order

The sorted() function returns a sorted copy of the original list

The key parameter allows us to pass in a function which can serve as a key for the sort comparison:

    Example: 
        my_list = ['Loquacious', 'Chatty', 'Talkative']
        sorted_list = sorted(my_list, key=len, reverse=True)
        # => ['Loquacious', 'Talkative', 'Chatty']

  a) Adding to List:
    my_list = [0, 1, 2, 3]
    my_list[0] = None
    print(my_list)
    # => [None, 1, 2, 3]
    Python does provide us with two options to extend lists: list.append() and list.insert().
        *Where list.append() can only add to the end of a list, list.insert() can insert at any index.
           # my_list.insert(4, 'e')
           # my_list.append(4)
 
  b) Removing from Lists

    -The del() function.
        removes elements from a list, specified by an index or range of indices
            #del(my_list[0])

    -The list.pop() method.
        removes and returns the element at the index passed in as an argument. When used without any arguments, it removes and returns the last element of the list.
            #my_list.pop()     >>> returns last index
            #my_list.pop(3)    >>> returns item at index 3

    -The list.remove() method.
        removes the element passed in as an argument. This is one of the few list methods that searches by value instead of index!
            #my_list.remove('f')

    -The list.clear() method.
        erases all of the values of a list. This is usually not a very useful tool, but it's a fast way to free up memory on your device if you're working with a particularly large list in the Python shell.
            #my_list.clear() >>> will return nothing


Tuples:
Tuples do not have any special exclusive methods like lists do. This is because tuples are immutable. The sequence that they are provided when they are created is maintained as long as the tuple object exists.

Ranges:
    -most commonly used in for loops
    -Ranges can only contain integers in a fixed pattern
    -The range constructor only requires one argument: the end of the range.
   
    -Ranges is similar to how slicing works in lists.
        There are two optional arguments that you can include when creating a range: a start value and a step size.
            range(4) gives us 0, 1, 2, 3
            range(1, 4) gives us 1, 2, 3
            range(0, 4, 2) gives us 0, 2

    -While ranges are very similar to lists, a range is a different data type and they exhibit some unique behaviors.

Strings:
    -Python strings have many methods that allow you to access and manipulate their individual elements. It's very important to remember while working with strings that they are iterable objects (they can be looped through!) and they are indexed.
    Example:
        my_string = 'Hello'
        for char in my_string:
        print(char)
        >>> #H
            #e
            #l
            #l
            #0
        my_string[0] >>> #H

    Changing Case:
        Strings can be formatted for case using three methods:
            str.upper() returns an uppercase version of the original string.
            str.lower() returns a lowercase version of the original string.
            str.title() returns the original string in titlecase (with the first letter of each new word capitalized.)
    N/B >>> Strings are immutable     